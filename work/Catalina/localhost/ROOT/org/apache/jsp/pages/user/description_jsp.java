/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.105
 * Generated at: 2025-06-14 05:24:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import models.user.Product;

public final class description_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("models.user.Product");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Product Detail | Sekenly</title>\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("styles/navbar.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("styles/footer.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("styles/description.css\">\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Adamina&family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

    // Get product from request attribute
    Product product = (Product) request.getAttribute("product");
    String productImage = (String) request.getAttribute("productImage");

    // If product is not set, redirect to home page
    if (product == null) {
        response.sendRedirect(request.getContextPath() + "/");
        return;
    }

      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../components/navbar.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"product-container\">\r\n");
      out.write("    <div class=\"breadcrumb\">\r\n");
      out.write("        <a href=\"");
      out.print(request.getContextPath());
      out.write("/\">Home</a> &gt;\r\n");
      out.write("        <a href=\"");
      out.print(request.getContextPath());
      out.write("/categories?action=category\">Shop</a> &gt;\r\n");
      out.write("        <a href=\"");
      out.print(request.getContextPath());
      out.write("/categories?action=category&category=");
      out.print( product.getCategory() );
      out.write('"');
      out.write('>');
      out.print( product.getCategory() );
      out.write("</a> &gt;\r\n");
      out.write("        <span>");
      out.print( product.getName() );
      out.write("</span>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"product-detail\">\r\n");
      out.write("        <div class=\"product-image\">\r\n");
      out.write("            <img src=\"");
      out.print(request.getContextPath());
      out.write('/');
      out.print( productImage );
      out.write("\" alt=\"");
      out.print( product.getName() );
      out.write("\">\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"product-info\">\r\n");
      out.write("            <h1>");
      out.print( product.getName() );
      out.write("</h1>\r\n");
      out.write("            <div class=\"product-meta\">\r\n");
      out.write("                <p class=\"product-category\">");
      out.print( product.getCategory() );
      out.write("</p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"product-price\">\r\n");
      out.write("                <h2>Rp ");
      out.print( String.format("%,.0f", product.getPrice()) );
      out.write("</h2>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"product-description\">\r\n");
      out.write("                <h3>Product Description</h3>\r\n");
      out.write("                <p>");
      out.print( product.getDescription() );
      out.write("</p>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"product-actions\">\r\n");
      out.write("                <form action=\"");
      out.print(request.getContextPath());
      out.write("/pages/user/detail-pembelian.jsp\" method=\"post\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"productId\" value=\"");
      out.print( product.getId() );
      out.write("\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"productName\" value=\"");
      out.print( product.getName() );
      out.write("\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"productPrice\" value=\"");
      out.print( String.format("%,.0f", product.getPrice()) );
      out.write("\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"productImage\" value=\"");
      out.print( productImage );
      out.write("\">\r\n");
      out.write("                    <button type=\"submit\" class=\"add-to-cart-btn\">\r\n");
      out.write("                        Buy Now\r\n");
      out.write("                    </button>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"additional-info\">\r\n");
      out.write("        <div class=\"info-tabs\">\r\n");
      out.write("            <button class=\"tab-btn active\" data-tab=\"details\">Product Details</button>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"tab-content active\" id=\"details-content\">\r\n");
      out.write("            <h3>Product Details</h3>\r\n");
      out.write("            <p>");
      out.print( product.getDescription() );
      out.write("</p>\r\n");
      out.write("            <div class=\"product-attributes\">\r\n");
      out.write("                <div class=\"attribute\">\r\n");
      out.write("                    <span class=\"attribute-name\">Category:</span>\r\n");
      out.write("                    <span class=\"attribute-value\">");
      out.print( product.getCategory() );
      out.write("</span>\r\n");
      out.write("                </div>\r\n");
      out.write("                ");
 if (product.getSize() != null && !product.getSize().isEmpty()) { 
      out.write("\r\n");
      out.write("                <div class=\"attribute\">\r\n");
      out.write("                    <span class=\"attribute-name\">Size:</span>\r\n");
      out.write("                    <span class=\"attribute-value\">");
      out.print( product.getSize() );
      out.write("</span>\r\n");
      out.write("                </div>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../components/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("        // Tab functionality\r\n");
      out.write("        const tabBtns = document.querySelectorAll('.tab-btn');\r\n");
      out.write("        const tabContents = document.querySelectorAll('.tab-content');\r\n");
      out.write("\r\n");
      out.write("        tabBtns.forEach(btn => {\r\n");
      out.write("            btn.addEventListener('click', function() {\r\n");
      out.write("                // Remove active class from all buttons and contents\r\n");
      out.write("                tabBtns.forEach(b => b.classList.remove('active'));\r\n");
      out.write("                tabContents.forEach(c => c.classList.remove('active'));\r\n");
      out.write("\r\n");
      out.write("                // Add active class to clicked button and corresponding content\r\n");
      out.write("                this.classList.add('active');\r\n");
      out.write("                const tabId = this.getAttribute('data-tab');\r\n");
      out.write("                document.getElementById(tabId + '-content').classList.add('active');\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
