/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.105
 * Generated at: 2025-06-12 18:12:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import models.auth.Product;
import java.util.List;
import java.util.Map;

public final class category_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("models.auth.Product");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Category</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"/styles/category.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"/styles/navbar.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"/styles/footer.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/components/navbar.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");

        // Get attributes from the controller
        String selectedCategory = (String)request.getAttribute("selectedCategory");
        String sortBy = (String)request.getAttribute("sortBy");
        if (sortBy == null) sortBy = "newest"; // Default if not set

        List<Product> products = (List<Product>)request.getAttribute("products");
        List<String> availableCategories = (List<String>)request.getAttribute("availableCategories");

        // If products is null, redirect to the controller
        if (products == null) {
            response.sendRedirect(request.getContextPath() + "/categories?action=category");
            return;
        }

        // Default title
        String pageTitle = "All Products";

        // If a category is selected, update page title
        if (selectedCategory != null && !selectedCategory.isEmpty()) {
            pageTitle = selectedCategory;
        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"content\">\r\n");
      out.write("        <div class=\"breadcrumb\">\r\n");
      out.write("            <a href=\"/\">Home</a> &gt; <span>Category</span> ");
 if(selectedCategory != null) { 
      out.write(" &gt; <span>");
      out.print( selectedCategory );
      out.write("</span> ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("            <div class=\"filter-container\">\r\n");
      out.write("                <div class=\"filter-title\">\r\n");
      out.write("                    <h1>Filter</h1>\r\n");
      out.write("                    <img src=\"../../assets/filter-icon.png\" alt=\"filter-icon\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <hr>\r\n");
      out.write("                <div class=\"item-category\">\r\n");
      out.write("                    ");
 for (String category : availableCategories) { 
      out.write("\r\n");
      out.write("                    <a href=\"");
      out.print(request.getContextPath());
      out.write("/categories?action=category&category=");
      out.print( category );
      out.write('"');
      out.write(' ');
      out.print( category.equals(selectedCategory) ? "class='active'" : "" );
      out.write('>');
      out.print( category );
      out.write("</a>\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("                <a href=\"");
      out.print(request.getContextPath());
      out.write("/categories?action=category\" class=\"filter-button\">\r\n");
      out.write("                    <button type=\"button\">Clear Filter</button>\r\n");
      out.write("                </a>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"category-item\">\r\n");
      out.write("                <div class=\"category-title-item\">\r\n");
      out.write("                    <h2>");
      out.print( pageTitle );
      out.write("</h2>\r\n");
      out.write("                    <div class=\"item-index\">\r\n");
      out.write("                        <p>Showing filtered products</p>\r\n");
      out.write("                        <div class=\"short-by\">\r\n");
      out.write("                            <label for=\"sort\">Sort by:</label>\r\n");
      out.write("                            <select name=\"sort\" id=\"sort\" onchange=\"location = this.value;\">\r\n");
      out.write("                                ");

                                // Create proper URL for the sort options, handling cases when no category is selected
                                String baseUrl = request.getContextPath() + "/categories?action=category";
                                String categoryParam = selectedCategory != null && !selectedCategory.isEmpty() ? "&category=" + selectedCategory + "&" : "&";
                                
      out.write("\r\n");
      out.write("                                <option value=\"");
      out.print( baseUrl + categoryParam );
      out.write("sort=newest\" ");
      out.print( "newest".equals(sortBy) ? "selected" : "" );
      out.write(">Newest</option>\r\n");
      out.write("                                <option value=\"");
      out.print( baseUrl + categoryParam );
      out.write("sort=price-low-to-high\" ");
      out.print( "price-low-to-high".equals(sortBy) ? "selected" : "" );
      out.write(">Price: Low to High</option>\r\n");
      out.write("                                <option value=\"");
      out.print( baseUrl + categoryParam );
      out.write("sort=price-high-to-low\" ");
      out.print( "price-high-to-low".equals(sortBy) ? "selected" : "" );
      out.write(">Price: High to Low</option>\r\n");
      out.write("                            </select>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"item-content\">\r\n");
      out.write("                    <div class=\"item-list\">\r\n");
      out.write("                    ");

                        // Display message if no products found
                        if(products.isEmpty()) {
                    
      out.write("\r\n");
      out.write("                        <div class=\"no-products\">\r\n");
      out.write("                            <p>No products found in this category.</p>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    ");

                        } else {
                            // Get product images map from controller
                            Map<Integer, String> productImages = (Map<Integer, String>)request.getAttribute("productImages");

                            // Display each product
                            for(Product product : products) {
                                String productName = product.getName();
                                double price = product.getPrice();
                                String size = product.getSize();
                                int productId = product.getId();

                                // Get image path from the map provided by controller
                                String imagePath = request.getContextPath() + "/assets/" +
                                    (productImages != null && productImages.containsKey(productId) ?
                                    productImages.get(productId) : "image-8.png");
                    
      out.write("\r\n");
      out.write("                        <div class=\"item\">\r\n");
      out.write("                            <img src=\"");
      out.print( imagePath );
      out.write("\" alt=\"");
      out.print( productName );
      out.write("\">\r\n");
      out.write("                            <div class=\"item-desc\">\r\n");
      out.write("                                <h3>");
      out.print( productName );
      out.write("</h3>\r\n");
      out.write("                                <p>Rp ");
      out.print( String.format("%,.0f", price) );
      out.write("</p>\r\n");
      out.write("                                <p class=\"size-info\">Size: ");
      out.print( size );
      out.write("</p>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    ");

                            }
                        }
                    
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                    <div class=\"pagination-container\">\r\n");
      out.write("                        <hr>\r\n");
      out.write("                        <div class=\"pagination\">\r\n");
      out.write("                            ");

                            // Get pagination data from controller
                            Integer currentPage = (Integer)request.getAttribute("currentPage");
                            Integer totalPages = (Integer)request.getAttribute("totalPages");
                            Integer totalProducts = (Integer)request.getAttribute("totalProducts");

                            if (currentPage == null) currentPage = 1;
                            if (totalPages == null) totalPages = 1;
                            if (totalProducts == null) totalProducts = 0;

                            // Base URL for pagination (use a different variable name)
                            String paginationBaseUrl = request.getContextPath() + "/categories?action=category";
                            if (selectedCategory != null && !selectedCategory.isEmpty()) {
                                paginationBaseUrl += "&category=" + selectedCategory;
                            }
                            if (sortBy != null && !sortBy.isEmpty()) {
                                paginationBaseUrl += "&sort=" + sortBy;
                            }
                            
      out.write("\r\n");
      out.write("\r\n");
      out.write("                            <!-- Previous page link -->\r\n");
      out.write("                            <a href=\"");
      out.print( paginationBaseUrl );
      out.write("&page=");
      out.print( Math.max(1, currentPage - 1) );
      out.write('"');
      out.write(' ');
      out.print( currentPage <= 1 ? "class='disabled'" : "" );
      out.write(">&laquo; Previous</a>\r\n");
      out.write("\r\n");
      out.write("                            <div class=\"num-page\">\r\n");
      out.write("                                ");

                                // Show page numbers
                                int startPage = Math.max(1, currentPage - 2);
                                int endPage = Math.min(totalPages, startPage + 4);
                                if (endPage - startPage < 4) {
                                    startPage = Math.max(1, endPage - 4);
                                }

                                for (int i = startPage; i <= endPage; i++) {
                                
      out.write("\r\n");
      out.write("                                <a href=\"");
      out.print( paginationBaseUrl );
      out.write("&page=");
      out.print( i );
      out.write('"');
      out.write(' ');
      out.print( i == currentPage ? "class='active'" : "" );
      out.write('>');
      out.print( i );
      out.write("</a>\r\n");
      out.write("                                ");

                                }

                                // Show ellipsis if needed
                                if (endPage < totalPages) {
                                
      out.write("\r\n");
      out.write("                                <span>...</span>\r\n");
      out.write("                                <a href=\"");
      out.print( paginationBaseUrl );
      out.write("&page=");
      out.print( totalPages );
      out.write('"');
      out.write('>');
      out.print( totalPages );
      out.write("</a>\r\n");
      out.write("                                ");

                                }
                                
      out.write("\r\n");
      out.write("                            </div>\r\n");
      out.write("\r\n");
      out.write("                            <!-- Next page link -->\r\n");
      out.write("                            <a href=\"");
      out.print( paginationBaseUrl );
      out.write("&page=");
      out.print( Math.min(totalPages, currentPage + 1) );
      out.write('"');
      out.write(' ');
      out.print( currentPage >= totalPages ? "class='disabled'" : "" );
      out.write(">Next &raquo;</a>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/components/footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
