/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.105
 * Generated at: 2025-06-14 05:23:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.Map;
import models.user.Product;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("models.user.Product");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("    <title>Sekenly | Home</title>\r\n");
      out.write("\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./components/navbar.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"styles/navbar.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"styles/footer.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"styles/style.css\">\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Adamina&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&family=Roboto:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"dashboard\">\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"text-dashboard\">\r\n");
      out.write("            <h1>Shop Preloved Fashion, Save More in Style</h1>\r\n");
      out.write("            <p>Temukan fashion favoritmu tanpa bikin dompet tipis. Barang second, kualitas juara!</p>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <a class=\"btn\" href=\"");
      out.print( request.getContextPath() );
      out.write("/ProductControllers?action=category\">Explore</a>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"image-wrapper\">\r\n");
      out.write("        <img src=\"assets/clothes.png\" alt=\"\">\r\n");
      out.write("        <div class=\"image-gradient\"></div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"new-arrival\" id=\"new-arrival\">\r\n");
      out.write("    <h1>Products</h1>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"new-arrival-item\">\r\n");
      out.write("            ");

                List<Product> products = (List<Product>) request.getAttribute("products");
                Map<Integer, String> productImages = (Map<Integer, String>) request.getAttribute("productImages");

                if (products == null || products.isEmpty()) {
                    out.println("<div style='color:orange'>Products kosong. Data tidak ditemukan di database.</div>");
                } else {
                    // Loop melalui produk
                    for (Product item : products) {
            
      out.write("\r\n");
      out.write("            <div class=\"item\">\r\n");
      out.write("                <a href=\"");
      out.print( request.getContextPath() );
      out.write("/ProductControllers?action=detail&id=");
      out.print( item.getId() );
      out.write("\">\r\n");
      out.write("                    ");

                        // Get image path from controller
                        String imageName = "images/clothes.png"; // Default fallback
                        if (productImages != null && productImages.containsKey(item.getId())) {
                            imageName = productImages.get(item.getId());
                        }
                    
      out.write("\r\n");
      out.write("                    <img src=\"");
      out.print( request.getContextPath() );
      out.write('/');
      out.print( imageName );
      out.write("\" alt=\"");
      out.print( item.getName() );
      out.write("\">\r\n");
      out.write("                </a>\r\n");
      out.write("                <div class=\"desc\">\r\n");
      out.write("                    <div class=\"item-info\">\r\n");
      out.write("                        <h3>Rp ");
      out.print( String.format("%,.0f", item.getPrice()) );
      out.write("</h3>\r\n");
      out.write("                        <p><a href=\"");
      out.print( request.getContextPath() );
      out.write("/ProductControllers?action=detail&id=");
      out.print( item.getId() );
      out.write('"');
      out.write('>');
      out.print( item.getName() );
      out.write("</a></p>\r\n");
      out.write("                        <p>");
      out.print( item.getSize() );
      out.write("</p>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            ");
      }
            }
            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"btn\">\r\n");
      out.write("            <a href=\"");
      out.print( request.getContextPath() );
      out.write("/ProductControllers?action=category\">See More</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"new-arrival\" id=\"new-arrival\">\r\n");
      out.write("    <h1>New Arrival</h1>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"new-arrival-item\">\r\n");
      out.write("            ");

                List<Product> hotItems = (List<Product>) request.getAttribute("hotItems");
                Map<Integer, String> hotItemsImages = (Map<Integer, String>) request.getAttribute("hotItemsImages");

                if (hotItems == null || hotItems.isEmpty()) {
                    out.println("<div style='color:orange'>Produk terbaru tidak ditemukan di database.</div>");
                } else {
                    // Loop melalui produk terbaru
                    for (Product item : hotItems) {
            
      out.write("\r\n");
      out.write("            <div class=\"item\">\r\n");
      out.write("                <a href=\"");
      out.print( request.getContextPath() );
      out.write("/ProductControllers?action=detail&id=");
      out.print( item.getId() );
      out.write("\">\r\n");
      out.write("                    ");

                        // Get image from controller
                        String imageName = "images/clothes.png"; // default image
                        if (hotItemsImages != null && hotItemsImages.containsKey(item.getId())) {
                            imageName = hotItemsImages.get(item.getId());
                        }
                    
      out.write("\r\n");
      out.write("                    <img src=\"");
      out.print( request.getContextPath() );
      out.write('/');
      out.print( imageName );
      out.write("\" alt=\"");
      out.print( item.getName() );
      out.write("\">\r\n");
      out.write("                </a>\r\n");
      out.write("                <div class=\"desc\">\r\n");
      out.write("                    <div class=\"item-info\">\r\n");
      out.write("                        <h3>Rp ");
      out.print( String.format("%,.0f", item.getPrice()) );
      out.write("</h3>\r\n");
      out.write("                        <p><a href=\"");
      out.print( request.getContextPath() );
      out.write("/ProductControllers?action=detail&id=");
      out.print( item.getId() );
      out.write('"');
      out.write('>');
      out.print( item.getName() );
      out.write("</a></p>\r\n");
      out.write("                        <p>");
      out.print( item.getSize() );
      out.write("</p>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            ");

                    }
                }
            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"btn\">\r\n");
      out.write("            <a href=\"");
      out.print( request.getContextPath() );
      out.write("/ProductControllers?action=category\">See More</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./components/footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
