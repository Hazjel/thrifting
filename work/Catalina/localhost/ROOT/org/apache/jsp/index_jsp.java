/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.105
 * Generated at: 2025-06-12 09:22:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import models.auth.Product;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("models.auth.Product");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("-->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("    <title>Sekenly | Home</title>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <meta http-equiv=\"refresh\" content=\"5\">\r\n");
      out.write("\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./components/navbar.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"styles/navbar.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"styles/footer.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"styles/style.css\">\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Adamina&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&family=Roboto:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"dashboard\">\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("            <div class=\"text-dashboard\">\r\n");
      out.write("                <h1>Shop Preloved Fashion, Save More in Style</h1>\r\n");
      out.write("                <p>Temukan fashion favoritmu tanpa bikin dompet tipis. Barang second, kualitas juara!</p>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <a class=\"btn\" href=\"ProductControllers\">Explore</a>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"image-wrapper\">\r\n");
      out.write("            <img src=\"assets/clothes.png\" alt=\"\">\r\n");
      out.write("            <div class=\"image-gradient\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"new-arrival\" id=\"new-arrival\">\r\n");
      out.write("        <h1>Products</h1>\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("            <div class=\"new-arrival-item\">\r\n");
      out.write("                ");

                    List<Product> products = (List<Product>) request.getAttribute("products");
                    if (products == null) {
                        // Jika products belum ada di request, ambil langsung dari database
                        products = Product.getProducts();
                    }

                    if (products == null) {
                        out.println("<div style='color:red'>products is null. Pastikan akses lewat ProductControllers!</div>");
                    } else if (products.isEmpty()) {
                        out.println("<div style='color:orange'>products kosong. Data tidak ditemukan di database.</div>");
                    } else {
                        // Loop melalui produk
                        for (Product item : products) {
                
      out.write("\r\n");
      out.write("                            <div class=\"item\">\r\n");
      out.write("                                <a href=\"pages/user/description.jsp?id=");
      out.print( item.getId() );
      out.write("\">\r\n");
      out.write("                                    ");

                                    // Pilih gambar berdasarkan nama produk
                                    String imageName = "item1.png"; // default image

                                    // Cek nama produk dan sesuaikan dengan gambar yang tersedia
                                    if (item.getName() != null) {
                                        String productName = item.getName().toLowerCase();

                                        if (productName.contains("nike")) {
                                            imageName = "Baju Nike.png";
                                        } else if (productName.contains("kappa")) {
                                            imageName = "Kappa.png";
                                        } else if (productName.contains("oakley")) {
                                            imageName = "Oakley.png";
                                        } // tambahkan kondisi lain sesuai kebutuhan
                                    }
                                    
      out.write("\r\n");
      out.write("                                    <img src=\"assets/");
      out.print( imageName );
      out.write("\" alt=\"");
      out.print( item.getName() );
      out.write("\">\r\n");
      out.write("                                </a>\r\n");
      out.write("                                <div class=\"desc\">\r\n");
      out.write("                                    <div class=\"item-info\">\r\n");
      out.write("                                        <h3>Rp ");
      out.print( String.format("%,.0f", item.getPrice()) );
      out.write("</h3>\r\n");
      out.write("                                        <p>");
      out.print( item.getName() );
      out.write("</p>\r\n");
      out.write("                                        <p>Size: ");
      out.print( item.getSize() );
      out.write("</p>\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                    <a href=\"#\" class=\"fav\">\r\n");
      out.write("                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"37\" height=\"37\" viewBox=\"0 0 37 37\"\r\n");
      out.write("                                            fill=\"none\">\r\n");
      out.write("                                            <path\r\n");
      out.write("                                                d=\"M6.53634 18.8855C5.92678 18.28 5.44382 17.5592 5.11562 16.7652C4.78741 15.9711 4.62052 15.1197 4.62467 14.2605C4.62467 12.5228 5.31498 10.8563 6.54374 9.6275C7.77249 8.39875 9.43904 7.70844 11.1768 7.70844C13.6126 7.70844 15.7401 9.03428 16.8655 11.0076H18.5922C19.1643 10.0041 19.9922 9.17008 20.9915 8.59055C21.9907 8.01102 23.1258 7.70665 24.2809 7.70844C26.0186 7.70844 27.6852 8.39875 28.9139 9.6275C30.1427 10.8563 30.833 12.5228 30.833 14.2605C30.833 16.0643 30.0622 17.7293 28.9213 18.8855L17.7288 30.0626L6.53634 18.8855ZM30.0005 19.9801C31.4651 18.5001 32.3747 16.4959 32.3747 14.2605C32.3747 12.1139 31.5219 10.0553 30.0041 8.53738C28.4862 7.01951 26.4275 6.16678 24.2809 6.16678C21.583 6.16678 19.1934 7.47719 17.7288 9.51219C16.9813 8.47388 15.9969 7.62877 14.8575 7.04696C13.718 6.46515 12.4562 6.16341 11.1768 6.16678C9.03016 6.16678 6.97148 7.01951 5.45361 8.53738C3.93574 10.0553 3.08301 12.1139 3.08301 14.2605C3.08301 16.4959 3.99259 18.5001 5.45717 19.9801L17.7288 32.2518L30.0005 19.9801Z\"\r\n");
      out.write("                                                fill=\"black\"></path>\r\n");
      out.write("                                        </svg>\r\n");
      out.write("                                    </a>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                ");
      }
                    }
                
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"btn\">\r\n");
      out.write("                <a href=\"ProductControllers\">See More</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"new-arrival\" id=\"new-arrival\">\r\n");
      out.write("        <h1>New Arrival</h1>\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("            <div class=\"new-arrival-item\">\r\n");
      out.write("                ");

                    // Mengambil produk terbaru dari database (4 produk terbaru)
                    List<Product> newArrivals = Product.getHotItems();

                    if (newArrivals == null || newArrivals.isEmpty()) {
                        out.println("<div style='color:orange'>Produk terbaru tidak ditemukan di database.</div>");
                    } else {
                        // Loop melalui produk terbaru
                        for (Product item : newArrivals) {
                
      out.write("\r\n");
      out.write("                    <div class=\"item\">\r\n");
      out.write("                        <a href=\"pages/user/description.jsp?id=");
      out.print( item.getId() );
      out.write("\">\r\n");
      out.write("                            ");

                            // Pilih gambar berdasarkan nama produk
                            String imageName = "item1.png"; // default image

                            // Cek nama produk dan sesuaikan dengan gambar yang tersedia
                            if (item.getName() != null) {
                                String productName = item.getName().toLowerCase();

                                if (productName.contains("nike")) {
                                    imageName = "Baju Nike.png";
                                } else if (productName.contains("kappa")) {
                                    imageName = "Kappa.png";
                                } else if (productName.contains("oakley")) {
                                    imageName = "Oakley.png";
                                } // tambahkan kondisi lain sesuai kebutuhan
                            }
                            
      out.write("\r\n");
      out.write("                            <img src=\"assets/");
      out.print( imageName );
      out.write("\" alt=\"");
      out.print( item.getName() );
      out.write("\">\r\n");
      out.write("                        </a>\r\n");
      out.write("                        <div class=\"desc\">\r\n");
      out.write("                            <div class=\"item-info\">\r\n");
      out.write("                                <h3>Rp ");
      out.print( String.format("%,.0f", item.getPrice()) );
      out.write("</h3>\r\n");
      out.write("                                <p>");
      out.print( item.getName() );
      out.write("</p>\r\n");
      out.write("                                <p>Size: ");
      out.print( item.getSize() );
      out.write("</p>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <a href=\"#\" class=\"fav\">\r\n");
      out.write("                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"37\" height=\"37\" viewBox=\"0 0 37 37\"\r\n");
      out.write("                                    fill=\"none\">\r\n");
      out.write("                                    <path\r\n");
      out.write("                                        d=\"M6.53634 18.8855C5.92678 18.28 5.44382 17.5592 5.11562 16.7652C4.78741 15.9711 4.62052 15.1197 4.62467 14.2605C4.62467 12.5228 5.31498 10.8563 6.54374 9.6275C7.77249 8.39875 9.43904 7.70844 11.1768 7.70844C13.6126 7.70844 15.7401 9.03428 16.8655 11.0076H18.5922C19.1643 10.0041 19.9922 9.17008 20.9915 8.59055C21.9907 8.01102 23.1258 7.70665 24.2809 7.70844C26.0186 7.70844 27.6852 8.39875 28.9139 9.6275C30.1427 10.8563 30.833 12.5228 30.833 14.2605C30.833 16.0643 30.0622 17.7293 28.9213 18.8855L17.7288 30.0626L6.53634 18.8855ZM30.0005 19.9801C31.4651 18.5001 32.3747 16.4959 32.3747 14.2605C32.3747 12.1139 31.5219 10.0553 30.0041 8.53738C28.4862 7.01951 26.4275 6.16678 24.2809 6.16678C21.583 6.16678 19.1934 7.47719 17.7288 9.51219C16.9813 8.47388 15.9969 7.62877 14.8575 7.04696C13.718 6.46515 12.4562 6.16341 11.1768 6.16678C9.03016 6.16678 6.97148 7.01951 5.45361 8.53738C3.93574 10.0553 3.08301 12.1139 3.08301 14.2605C3.08301 16.4959 3.99259 18.5001 5.45717 19.9801L17.7288 32.2518L30.0005 19.9801Z\"\r\n");
      out.write("                                    fill=\"black\"></path>\r\n");
      out.write("                                </svg>\r\n");
      out.write("                            </a>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                ");

                        }
                    }
                
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"btn\">\r\n");
      out.write("                <a href=\"ProductControllers\">See More</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./components/footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
